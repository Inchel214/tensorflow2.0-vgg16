import tensorflow as tf

vgg16 = tf.keras.models.Sequential([
    #输入层
    tf.keras.layers.Input(shape=(224,224,3)),
    #Block 1
    tf.keras.layers.Conv2D(filters=64,
                           kernel_size=(3, 3),
                           activation='relu',
                           padding='same',
                           name='block1_conv1'),
    tf.keras.layers.Conv2D(filters=64,
                           kernel_size=(3, 3),
                           activation='relu',
                           padding='same',
                           name='block1_conv2'),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name='block1_pool'),
    #Block 2
    tf.keras.layers.Conv2D(filters=128,
                           kernel_size=(3,3),
                           activation='relu',
                           padding='same',
                           name='block2_conv1'),
    tf.keras.layers.Conv2D(filters=128,
                          kernel_size=(3,3),
                          activation='relu',
                          padding='same',
                          name='block2_conv2'),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name='block2_pool'),
    #Block 3
    tf.keras.layers.Conv2D(filters=256,
                          kernel_size=(3,3),
                          activation='relu',
                          padding='same',
                          name='block3_conv1'),
    tf.keras.layers.Conv2D(filters=256,
                          kernel_size=(3,3),
                          activation='relu',
                          padding='same',
                          name='block3_conv2'),
    tf.keras.layers.Conv2D(filters=256,
                           kernel_size=(3,3),
                           activation='relu',
                           padding='same',
                           name='block3_conv3'),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name='block3_pool'),
    #Block 4
    tf.keras.layers.Conv2D(filters=512,
                           kernel_size=(3,3),
                           activation='relu',
                           padding='same',
                           name='block4_conv1'),
    tf.keras.layers.Conv2D(filters=512,
                           kernel_size=(3,3),
                           activation='relu',
                           padding='same',
                           name='block4_conv2'),
    tf.keras.layers.Conv2D(filters=512,
                           kernel_size=(3,3),
                           activation='relu',
                           padding='same',
                           name='block4_conv3'),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name='block4_pool'),
    #Block 5
    tf.keras.layers.Conv2D(filters=512,
                          kernel_size=(3,3),
                          activation='relu',
                          padding='same',
                          name='block5_conv1'),
    tf.keras.layers.Conv2D(filters=512,
                          kernel_size=(3,3),
                          activation='relu',
                          padding='same',
                          name='block5_conv2'),
    tf.keras.layers.Conv2D(filters=512,
                           kernel_size=(3,3),
                           activation='relu',
                           padding='same',
                           name='block5_conv3'),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name='block5_pool'),
    #Block 6
    tf.keras.layers.Flatten(input_shape=(),name='Flatten'),
    tf.keras.layers.Dense(4096,activation='relu',name='fc1'),
    tf.keras.layers.Dense(4096,activation='relu',name='fc2'),
    tf.keras.layers.Dense(10,activation='softmax',name='predictions')
],name='vgg16')